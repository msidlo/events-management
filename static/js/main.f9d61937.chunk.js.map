{"version":3,"sources":["logo.svg","mocks sync /^/.//.*/.json$","moduls/reducer.js","moduls/config.js","moduls/api.js","mocks/axios.js","moduls/redux.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","initialState","events","config","apiBaseUrl","apiUrls","fetchEvents","api","this","client","axios","create","baseURL","responseType","process","REACT_APP_USE_MOCKS","mock","MockAdapter","url","RegExp","onGet","reply","response","require","replace","Promise","reject","setTimeout","mockAxios","persistConfig","key","storage","persistedReducer","persistReducer","state","action","type","payload","data","applyMiddleware","axiosMiddleware","getAxiosClient","logger","store","next","createStore","compose","persistor","persistStore","App","loading","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,iGCA3C,IAAIC,EAAM,CACT,qBAAsB,IAIvB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,wRCbPU,EAAsB,CACjCC,OAAQ,I,qCCUH,IAAMC,EACN,CACHC,WATa,wBAUbC,QAAS,CACPC,YAVY,gB,qCCQLC,EAAM,I,WAhBjB,aAAe,oBACbC,KAAKC,OAASC,IAAMC,OAAO,CACzBC,QAAST,EAAWC,WACpBS,aAAc,SAGwB,SAApCC,qIAAYC,qBCRb,SAAmBL,GAExB,IAAMM,EAAO,IAAIC,IAAYP,GACvBQ,EAAM,IAAIC,OAAJ,MAEZH,EAAKI,MAAMF,GAAKG,OAAM,SAAAlB,GAEpB,IAAMmB,EAAWC,MAAQ,YAAKpB,EAAOe,IAAIM,QAAQ,IAAK,IAA9B,UACxB,OAAO,IAAIC,SAAQ,SAAUzB,EAAS0B,GACpCC,YAAY,WACV3B,EAAQ,CAAE,IAAKsB,MAZS,WDW1BM,CAAUpB,KAAKC,Q,6DAKjB,OAAOD,KAAKC,W,cETVoB,EAAgB,CACpBC,IAAK,oBACLC,Q,OAAAA,GAGIC,EAAmBC,YAAeJ,GJGzB,WAAmE,IAAlDK,EAAiD,uDAAlCjC,EAAckC,EAAoB,uCAE/E,OAAQA,EAAOC,MACb,IAPsB,iBAQpB,OAAO,eACFF,GAEP,IAV8B,yBAW5B,OAAO,2BACFA,GADL,IAEEhC,OAAQiC,EAAOE,QAAQC,KAAKpC,SAEhC,IAd2B,sBAezB,OAAO,eACFgC,GAEP,QACE,OAAOA,MIjBPxB,EAAQ6B,YAAgBC,IAAgBjC,EAAIkC,mBAK5CC,EAASH,aAAgB,SAAAI,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAT,GAC9CS,EAAKT,QASMQ,EAAQE,YAAYb,EAAkBc,YAAQpC,EAAOgC,IACrDK,EAAYC,YAAaL,G,QCAvBM,MAzBf,WACE,OACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,CAAaO,QAAS,KAAMH,UAAWA,GACrC,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,oBCNQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9d61937.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./fetchEvents.json\": 63\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 62;","// @flow\n\n/**\n* State of the application\n*/\nexport type State = {\n  events: Array<any>;\n}\n\nexport const initialState: State = {\n  events: []\n}\n\nexport const GET_EVENTS = 'api/GET_EVENTS'\nexport const GET_EVENTS_SUCCESS = 'api/GET_EVENTS_SUCCESS'\nexport const GET_EVENTS_FAIL = 'api/GET_EVENTS_FAIL'\n\nexport default function reducer(state: State = initialState, action: any): State {\n\n  switch (action.type) {\n    case GET_EVENTS:\n      return {\n        ...state\n      }\n    case GET_EVENTS_SUCCESS:\n      return {\n        ...state,\n        events: action.payload.data.events\n      }\n    case GET_EVENTS_FAIL:\n      return {\n        ...state\n      }\n    default:\n      return state\n  }\n}\n\nexport function fetchEvents(page: number, filter: string) {\n  return {\n    type: GET_EVENTS,\n    payload: {\n      request: {\n        url: `/fetchEvents`,\n        params: {\n          page,\n          filter\n        },\n      }\n    } \n  }\n}\n","// @flow\n\ninterface ApiConfig {\n  apiBaseUrl: string,\n  apiUrls: {\n    fetchEvents: string\n  }\n}\n\nexport interface Configuration {\n  api: ApiConfig,\n}\n\nlet apiBaseUrl = 'https://www.cool.com/'\nlet fetchEvents = 'fetchEvents'\n\nif(process.env.NODE_ENV !== 'production') {\n    apiBaseUrl = 'https://www.dev.cool.com/'\n}\n\nexport const config: Configuration = {\n  api: {\n    apiBaseUrl,\n    apiUrls: {\n      fetchEvents\n    }\n  },\n}\n","import { config } from './config'\nimport axios from 'axios'\nimport { mockAxios } from '../mocks/axios'\n\nclass Api {\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: config.api.apiBaseUrl,\n      responseType: 'json'\n    })\n\n    if (process.env.REACT_APP_USE_MOCKS === 'true') {\n      mockAxios(this.client)\n    }\n  }\n\n  getAxiosClient() {\n    return this.client\n  }\n}\n\nexport const api = new Api()\n","import MockAdapter from 'axios-mock-adapter'\n\nconst DEFAULT_REQUEST_TIMEOUT = 1000\n\nexport function mockAxios(axios) {\n\n  const mock = new MockAdapter(axios)\n  const url = new RegExp(`/*`);\n\n  mock.onGet(url).reply(config => {\n    // All calls for get must have .json file with mocked response\n    const response = require(`./${config.url.replace('/', '')}.json`)\n    return new Promise(function (resolve, reject) {\n      setTimeout( () => {\n        resolve([ 200, response ])\n      }, DEFAULT_REQUEST_TIMEOUT);\n    })\n  })\n}\n","\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport reducer from './reducer'\nimport axiosMiddleware from 'redux-axios-middleware'\nimport { api } from './api'\nimport storage from 'redux-persist/lib/storage'\n\n// Persist redux state\nconst persistConfig = {\n  key: 'events-management',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\n// Middlewares\nconst axios = applyMiddleware(axiosMiddleware(api.getAxiosClient()))\n\n/** Custom logger\n* See store state after each dispatch\n*/\nconst logger = applyMiddleware(store => next => action => {\n  next(action)\n  if (process.env.NODE_ENV === 'development') {  \n    console.log({\n        name: action.type,\n        value: store.getState()\n    })\n  }\n})\n\nexport const store = createStore(persistedReducer, compose(axios, logger))\nexport const persistor = persistStore(store)\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Provider } from 'react-redux'\nimport { store, persistor } from './moduls/redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n          </header>\n        </div>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}